/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestToken, TestTokenInterface } from "../TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x940e1a25",
        type: "bytes32",
      },
    ],
    name: "c_0x940e1a25",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001c8738038062001c87833981810160405281019062000037919062000433565b6040518060400160405280600a81526020017f5465737420546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f74657374000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb9291906200036c565b508060049080519060200190620000d49291906200036c565b5050506200010b7f897fc0d59e0d9be176919fffe8c140a35276c46741729288b0eb298d6e2bb1a260001b620001c560201b60201c565b6200013f7f5a5983e6a5f1c627b0cfc877c5f0969bd1457926e0baeb201a77fcf57abea0ab60001b620001c560201b60201c565b620001737f03aef59be76a3eec61a69ffe9eb5b5b1665d36ddea0ece59e42599c09aa96a6a60001b620001c560201b60201c565b620001be33620001b26200018c620001c860201b60201c565b60ff16600a6200019d9190620005ba565b84620001d160201b620007911790919060201c565b620001e960201b60201c565b506200081d565b50565b60006012905090565b60008183620001e19190620006f7565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200025c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025390620004b2565b60405180910390fd5b62000270600083836200036260201b60201c565b806002600082825462000284919062000502565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620002db919062000502565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620003429190620004d4565b60405180910390a36200035e600083836200036760201b60201c565b5050565b505050565b505050565b8280546200037a9062000762565b90600052602060002090601f0160209004810192826200039e5760008555620003ea565b82601f10620003b957805160ff1916838001178555620003ea565b82800160010185558215620003ea579182015b82811115620003e9578251825591602001919060010190620003cc565b5b509050620003f99190620003fd565b5090565b5b8082111562000418576000816000905550600101620003fe565b5090565b6000815190506200042d8162000803565b92915050565b6000602082840312156200044657600080fd5b600062000456848285016200041c565b91505092915050565b60006200046e601f83620004f1565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b620004ac8162000758565b82525050565b60006020820190508181036000830152620004cd816200045f565b9050919050565b6000602082019050620004eb6000830184620004a1565b92915050565b600082825260208201905092915050565b60006200050f8262000758565b91506200051c8362000758565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000554576200055362000798565b5b828201905092915050565b6000808291508390505b6001851115620005b15780860481111562000589576200058862000798565b5b6001851615620005995780820291505b8081029050620005a985620007f6565b945062000569565b94509492505050565b6000620005c78262000758565b9150620005d48362000758565b9250620006037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200060b565b905092915050565b6000826200061d5760019050620006f0565b816200062d5760009050620006f0565b8160018114620006465760028114620006515762000687565b6001915050620006f0565b60ff84111562000666576200066562000798565b5b8360020a91508482111562000680576200067f62000798565b5b50620006f0565b5060208310610133831016604e8410600b8410161715620006c15782820a905083811115620006bb57620006ba62000798565b5b620006f0565b620006d084848460016200055f565b92509050818404811115620006ea57620006e962000798565b5b81810290505b9392505050565b6000620007048262000758565b9150620007118362000758565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200074d576200074c62000798565b5b828202905092915050565b6000819050919050565b600060028204905060018216806200077b57607f821691505b60208210811415620007925762000791620007c7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60008160011c9050919050565b6200080e8162000758565b81146200081a57600080fd5b50565b61145a806200082d6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d71461022d578063a9059cbb1461025d578063dd62ed3e1461028d576100d4565b806339509351146101af57806370a08231146101df57806395d89b411461020f576100d4565b806323b872dd116100b257806323b872dd1461014557806324a9090d14610175578063313ce56714610191576100d4565b806306fdde03146100d9578063095ea7b3146100f757806318160ddd14610127575b600080fd5b6100e16102bd565b6040516100ee91906110a8565b60405180910390f35b610111600480360381019061010c9190610cf8565b61034f565b60405161011e919061108d565b60405180910390f35b61012f61036d565b60405161013c91906111aa565b60405180910390f35b61015f600480360381019061015a9190610ca9565b610377565b60405161016c919061108d565b60405180910390f35b61018f600480360381019061018a9190610d34565b61046f565b005b610199610472565b6040516101a691906111c5565b60405180910390f35b6101c960048036038101906101c49190610cf8565b61047b565b6040516101d6919061108d565b60405180910390f35b6101f960048036038101906101f49190610c44565b610527565b60405161020691906111aa565b60405180910390f35b61021761056f565b60405161022491906110a8565b60405180910390f35b61024760048036038101906102429190610cf8565b610601565b604051610254919061108d565b60405180910390f35b61027760048036038101906102729190610cf8565b6106ec565b604051610284919061108d565b60405180910390f35b6102a760048036038101906102a29190610c6d565b61070a565b6040516102b491906111aa565b60405180910390f35b6060600380546102cc9061133e565b80601f01602080910402602001604051908101604052809291908181526020018280546102f89061133e565b80156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061036361035c6107a7565b84846107af565b6001905092915050565b6000600254905090565b600061038484848461097a565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103cf6107a7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561044f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104469061112a565b60405180910390fd5b6104638561045b6107a7565b8584036107af565b60019150509392505050565b50565b60006012905090565b600061051d6104886107a7565b8484600160006104966107a7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461051891906111fc565b6107af565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461057e9061133e565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa9061133e565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b600080600160006106106107a7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c49061118a565b60405180910390fd5b6106e16106d86107a7565b858584036107af565b600191505092915050565b60006107006106f96107a7565b848461097a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818361079f9190611252565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561081f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108169061116a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561088f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610886906110ea565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161096d91906111aa565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e19061114a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a51906110ca565b60405180910390fd5b610a65838383610bfb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae29061110a565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b7e91906111fc565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610be291906111aa565b60405180910390a3610bf5848484610c00565b50505050565b505050565b505050565b600081359050610c14816113df565b92915050565b600081359050610c29816113f6565b92915050565b600081359050610c3e8161140d565b92915050565b600060208284031215610c5657600080fd5b6000610c6484828501610c05565b91505092915050565b60008060408385031215610c8057600080fd5b6000610c8e85828601610c05565b9250506020610c9f85828601610c05565b9150509250929050565b600080600060608486031215610cbe57600080fd5b6000610ccc86828701610c05565b9350506020610cdd86828701610c05565b9250506040610cee86828701610c2f565b9150509250925092565b60008060408385031215610d0b57600080fd5b6000610d1985828601610c05565b9250506020610d2a85828601610c2f565b9150509250929050565b600060208284031215610d4657600080fd5b6000610d5484828501610c1a565b91505092915050565b610d66816112be565b82525050565b6000610d77826111e0565b610d8181856111eb565b9350610d9181856020860161130b565b610d9a816113ce565b840191505092915050565b6000610db26023836111eb565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610e186022836111eb565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610e7e6026836111eb565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610ee46028836111eb565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206160008301527f6c6c6f77616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610f4a6025836111eb565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610fb06024836111eb565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006110166025836111eb565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b611078816112f4565b82525050565b611087816112fe565b82525050565b60006020820190506110a26000830184610d5d565b92915050565b600060208201905081810360008301526110c28184610d6c565b905092915050565b600060208201905081810360008301526110e381610da5565b9050919050565b6000602082019050818103600083015261110381610e0b565b9050919050565b6000602082019050818103600083015261112381610e71565b9050919050565b6000602082019050818103600083015261114381610ed7565b9050919050565b6000602082019050818103600083015261116381610f3d565b9050919050565b6000602082019050818103600083015261118381610fa3565b9050919050565b600060208201905081810360008301526111a381611009565b9050919050565b60006020820190506111bf600083018461106f565b92915050565b60006020820190506111da600083018461107e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611207826112f4565b9150611212836112f4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561124757611246611370565b5b828201905092915050565b600061125d826112f4565b9150611268836112f4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112a1576112a0611370565b5b828202905092915050565b60006112b7826112d4565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561132957808201518184015260208101905061130e565b83811115611338576000848401525b50505050565b6000600282049050600182168061135657607f821691505b6020821081141561136a5761136961139f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6113e8816112ac565b81146113f357600080fd5b50565b6113ff816112ca565b811461140a57600080fd5b50565b611416816112f4565b811461142157600080fd5b5056fea2646970667358221220629a678ffceadef8f7d71e79f641cde644d5eb892bfff6aa74c2a9711a2f8f6864736f6c63430008000033";

export class TestToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestToken> {
    return super.deploy(totalSupply, overrides || {}) as Promise<TestToken>;
  }
  getDeployTransaction(
    totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(totalSupply, overrides || {});
  }
  attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
