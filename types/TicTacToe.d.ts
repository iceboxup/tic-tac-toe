/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TicTacToeInterface extends ethers.utils.Interface {
  functions: {
    "c_0x9ee3039d(bytes32)": FunctionFragment;
    "createNewGame(address,uint256)": FunctionFragment;
    "gameCount()": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "joinGame(uint256)": FunctionFragment;
    "play(uint256,uint16,uint16)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "c_0x9ee3039d",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewGame",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gameCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "c_0x9ee3039d",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "JoinGame(address,uint256)": EventFragment;
    "NewGame(address,uint256)": EventFragment;
    "Play(address,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JoinGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Play"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class TicTacToe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TicTacToeInterface;

  functions: {
    c_0x9ee3039d(
      c__0x9ee3039d: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    createNewGame(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gameCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, number, number, BigNumber] & {
        player1: string;
        player2: string;
        token: string;
        amount: BigNumber;
        winner: number;
        turn: number;
        lastUpdate: BigNumber;
      }
    >;

    joinGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    play(
      gameId: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  c_0x9ee3039d(
    c__0x9ee3039d: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  createNewGame(
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gameCount(overrides?: CallOverrides): Promise<BigNumber>;

  games(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, number, number, BigNumber] & {
      player1: string;
      player2: string;
      token: string;
      amount: BigNumber;
      winner: number;
      turn: number;
      lastUpdate: BigNumber;
    }
  >;

  joinGame(
    gameId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  play(
    gameId: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    gameId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    c_0x9ee3039d(
      c__0x9ee3039d: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewGame(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameCount(overrides?: CallOverrides): Promise<BigNumber>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, number, number, BigNumber] & {
        player1: string;
        player2: string;
        token: string;
        amount: BigNumber;
        winner: number;
        turn: number;
        lastUpdate: BigNumber;
      }
    >;

    joinGame(gameId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    play(
      gameId: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(gameId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    JoinGame(
      joiner?: null,
      gameId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { joiner: string; gameId: BigNumber }
    >;

    NewGame(
      host?: null,
      gameId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { host: string; gameId: BigNumber }
    >;

    Play(
      player?: null,
      gameId?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { player: string; gameId: BigNumber; x: BigNumber; y: BigNumber }
    >;

    Withdraw(
      player?: null,
      gameId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; gameId: BigNumber }
    >;
  };

  estimateGas: {
    c_0x9ee3039d(
      c__0x9ee3039d: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewGame(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gameCount(overrides?: CallOverrides): Promise<BigNumber>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    play(
      gameId: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    c_0x9ee3039d(
      c__0x9ee3039d: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewGame(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gameCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    play(
      gameId: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
